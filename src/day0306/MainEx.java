package day0306;
/*
 		컬렉션 프레임워크
 			- java.util. 패키지에서는 Collection 프레임워크가 가장중요
 			- 컬렉션 인터페이스를 구현하고잇는 모든 인터페이스들 Collection<E>를 조상으로 두고있다
 			- 컬렉션 : 수집. 데이터의 보관 방법. 배열과 비슷(여러개의 값 보관)
 			- 배열의 단점을 보완하면서 세가지로 나뉜다(List , Set, Map 인터페이스)
 			
 		 배열의 단점
 			- 저장 할 수 있는 객체의 수가 배열을 생성할 때 결정함
 				즉, 정해진 메모리가 생성 됨.
 					: 컬렉션 프레임 워크는 정해지지 않는다.
 			- 객체를 삭제했을 때 해당 인덱스가 빈공간이 됨
 			 		: 컬렉션 프레임워크는 당겨져서 채워짐
 			 - 들어가는 값의 타입이 지정되어있음 - > 불특정 다수의 객체를 저장하기에 문제가있음
 			 		: 컬렉션 프레임워크는 모든 타입이 가능 
 			 		: <E> (제네릭) 이것으로 타입을 지정할 수 있다.
 			
 			List 인터페이스
 				- 데이터를 넣는 순서 유지 -> index 사용
 				- 값의 중복 허용
 				
 				구현 클래스
 					: ArrayList
 			
 			Set 인터페이스
 				- 저장 순서가 없다.
 				- 객체 중복 저장 불가(오류안남)
 				
 				구현클래스
 					: HashSet
 					: TreeSet -> 정렬가능, 프로그래밍에서 제일 비효율적이다
 										데이터의 양이 많으면 정렬을 하기위해 비교하기때문에 느려질 수 밖에 없다
 										-> 쓰지마셈
 			
 			Map 인터페이스
 				- 저장 순서 없음 
 				- 컬렉션에서 값을 저장하는 두가지 방법
 						1) 값만 저장 : List , Set ,,,등등
 						2) 값에 이름을 붙여서 저장 : Map ... 등등
 			 	- Key, value 라는 형식으로 저장 (key 와 value 하나의 Entry 라고도 한다)
 				- Value 의 중복허용
 				- Key 는 중복을 허용 하지 않음(유일)
 				
 				구현 클래스
 					: HashMap
 					: TreeMap
 				
 				Stack 
 					- First In Last Out
 					- Last In First Out
 					- 순서대로 쌓이기만하고 index 는 없다
 				Queue
 					- First In First Out
 					- 
 */
public class MainEx {

}
