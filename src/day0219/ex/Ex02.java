package day0219.ex;

public class Ex02 {
/*
  		* 생성자 
  			-> new 연산자와 같이 사용되어
  				클래스로부터 객체를 생성 할 때 호출되어
  				객체의 초기화 담당.
  			-> 객체의 초기화 : 클래스 변수를 초기화,
  									  메서드를 호출해서 객체를 사용 할 준비 하는 것.
		
		* 기본생성자
 			-> 모든 클래스는 반드시 하나 이상의 생성자를 가진다.
 			-> 클래스 내부에서 생성자를 생략했다면
 				컴파일러는 기본 생성자를 자동 추가 시킨다.
 			-> 매개변수가 있는 생성자를 만든다면
 				기본생성자 사용 불가능.
 			-> 이때, 기본생성자를 만들어주면 사용가능
 			
 		*생성자 선언
 			클래스이름 (매개변수){
 				//객체의 초기화식
 			: 클래스 이름과 동일.
 				메서드 형태와 비슷.
 				리턴타입이 없다.
 			}
 		
 		* 매개변수 유 / 무
 			-> 매개변수은 선언을 생략할 수 있다
 			-> 여러개 선언가능
 			-> new 연산자로 생성자를 호출(사용)을 할 때
 				외부의 값을 생성자의 {}영역 내부로 전달하는 역할
 				
 		* 클래스 변수 초기화
 			-> 클래스로부터 객체가 생성될 때 기본 초기값으로 자동 설정.
 			-> 다른 값으로 초기화하고 싶다면 두가지 방법이있음
 				1) 클래스 변수에 선언과 동시에 대입 : 초기화
 					-> 동일한 클래스로부터 생성되는 객체들은 
 						모두 같은 데이터를 갖게된다.
 						대입으로 변경 가능.
 				2) 생성자 초기화
 					-> 객체 생성 시 외부에서 제공되는 다양한 값들로
 						초기화 되어야 할 때 사용된다.
 					-> 생성자는 매개 값으로 값들을 받아서 초기화 함.
 					
 		* this.
 			- 매개변수의 이름이 너무 짧으면 가독성이 좋지 않다.
 				가능하면 초기화 시킬 클래스변수의 이름과 동일하게 
 				사용할 것을 권장.
 				-> 이때 매개변수와 클래스 변수의 이름이 같아서 
 					생성자 내부에서 해당 클래스의 변수로 접근 불가능
 					->	지역변수의 특성으로 매개변수의 사용 우선순위가 높기때문
 			- 객체 자신을 참조.
 				-> 우리가 나 자신 이라고 하듯이 객체 자신을 this 라고 한다.
 		
 		* 생성자 오버로딩(overloading)
 			-> 외부로부터 제공되는 다양한 데이터를 이용해서 객체를 초기화하려면
 				생성자도 다양화 할 필요가 있음.
 			ex) Car 객체에서 model 데이터 제공, model 과 color 데이터 제공
 				-> 자바는 다양한 방법으로 객체를 생성할 수 있도록 생성자 오버로딩 제공.
 				-> 매개변수를 달리하는 생성자를 여러개 선언하는 것을 말함.
 				# 주의 할점	- 매개변수의 타입, 순서, 개수가 같을 경우 오버로딩이 아님
 							 		- 변수의 이름은 상관없음
 		
 		* this() 다른 생성자 호출(사용)
 			- 생성자 오버로딩이 많아지면 중복되는 코드들이 발생.
 				-> 매개변수의 개수만 다르고 초기화식이 비슷한 경우.
 					-> 이때, 클래스 변수의 초기화식을 가지고 있는 생성자를 호출해서 사용.
 						-> 하나의 생성자의 초기화식을 집중적으로 작성,
 							나머지 생성자는 초기화식을 가지고있는 생성자를 호출해서 사용. 
 			- 생성자에서 다른 생성자를 호출할 때 사용 됨.	
 			
 			클래스(매개변수,. . ){
 				this(매개변수, . . 값);
 				실행문;
 			}
 			
 			* this. / this()
 				-> 반드시 생성자 내부의 첫출에 사용.
 			
 */
}
